<!DOCTYPE html>
<html lang="pt-br" data-theme="light">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Syncronia | Informa√ß√µes</title>

    <!-- Tailwind + DaisyUI CDN -->
    <link href="https://cdn.jsdelivr.net/npm/daisyui@5" rel="stylesheet" type="text/css"/>
    <script src="https://cdn.jsdelivr.net/npm/@@tailwindcss/browser@4"></script>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Flatpickr -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/pt.js"></script>

    <style>
        :root {
            --color-yellow: #ffcc00;
            --color-green: #2ecc71;
            --color-blue: #3498db;
        }

        .loading {
            pointer-events: none;
            opacity: 0.6;
        }

        .modal-box {
            overflow: visible !important;
        }
    </style>

    <!-- MAP -->
    <link rel="stylesheet"
          href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin="" />
    <!-- Geoman (Leaflet.PM) CSS -->
    <link rel="stylesheet" href="https://unpkg.com/@@geoman-io/leaflet-geoman-free@2.15.0/dist/leaflet-geoman.css" />
    <style>
        /* html, body { height: 100%; margin: 0; } */
        #app {
            width: 100%;
            height: 685px !important;
        }
        /*       header { padding: .75rem 1rem; border-bottom: 1px solid #e5e7eb; background: #fff; position: sticky; top: 0; z-index: 1000; }
              header h1 { margin: 0; font: 600 16px/1.2 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Arial, "Apple Color Emoji", "Segoe UI Emoji"; }
              header .actions { display: flex; gap: .5rem; margin-top: .5rem; flex-wrap: wrap; }
              button { appearance: none; border: 1px solid #e5e7eb; background: #fff; padding: .5rem .75rem; border-radius: .75rem; cursor: pointer; }
              button:hover { background: #f8fafc; } */
        #map {
            width: 100%;
            height: 685px !important
        }

        .help-card {
            position: absolute;
            right: .75rem;
            bottom: .75rem;
            z-index: 1001;
            background: rgba(255,255,255,.95);
            border: 1px solid #e5e7eb;
            border-radius: .75rem;
            padding: .5rem .75rem;
            max-width: 300px;
            box-shadow: 0 4px 24px rgba(0,0,0,.08);
        }

            .help-card small {
                color: #6b7280;
            }
    </style>
</head>
<body class="bg-base-100 text-base-content">

<!-- Navbar -->
<div class="navbar bg-base-100 shadow-sm">
    <div class="flex container mx-auto">
        <div class="flex-1">
                <h1 class="text-3xl font-bold my-2">Syncronia</h1>
        </div>
        <div class="flex gap-2">
            <div class="dropdown dropdown-end flex justify-center items-center">
                <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
                    <div class="w-10 rounded-full">
                        <img
                            alt="Tailwind CSS Navbar component"
                            src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp"/>
                    </div>
                </div>
                <ul tabindex="-1"
                    class="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow">
                    <li>
                        <a class="justify-between">
                            Profile
                            <span class="badge">New</span>
                        </a>
                    </li>
                    <li><a>Settings</a></li>
                    <li><a>Logout</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

<main class="container mx-auto py-8">

    <div class="flex justify-between items-center mb-4">
        <h2 class="card-title text-blue-800">A√ß√µes</h2>
        <button id="btnNovaAcao" class="btn btn-soft btn-primary">+ Nova A√ß√£o</button>
    </div>

    <!-- Se√ß√£o A√ß√µes -->
    <div class="card bg-base-100 border border-base-200 shadow-lg rounded-md">
        <div id="loadingSpinner" class="text-center py-8 hidden">
            <span class="loading loading-spinner loading-lg"></span>
        </div>

        <div class="overflow-x-auto">
            <table class="table table-zebra w-full">
                <thead>
                <tr>
                    <th class="w-100">T√≠tulo</th>
                    <th>Descri√ß√£o</th>
                    <th>Data In√≠cio</th>
                    <th>Data Fim</th>
                    <th>Obstru√ß√£o</th>
                    <th class="w-50">A√ß√µes</th>
                </tr>
                </thead>
                <tbody id="tabelaAcoes">
                <!-- Preenchido via jQuery -->
                </tbody>
            </table>
        </div>
    </div>
</main>

<!-- Modal Criar/Editar A√ß√£o -->
<dialog id="modalAcao" class="modal">
    <div class="modal-box w-11/12 max-w-7xl h-[90vh] flex flex-col p-0">
        <!-- Header -->
        <div class="px-6 py-4 border-b border-base-300">
            <h3 class="font-bold text-xl" id="modalTitle">Nova A√ß√£o</h3>
        </div>

        <!-- Body com Grid -->
        <div class="flex-1 overflow-hidden">
            <div class="grid grid-cols-1 lg:grid-cols-10 gap-0 h-full">
                <!-- Mapa (70%) -->
                <div class="lg:col-span-7 px-2 border-r border-base-300 overflow-auto">
                        <div id="app">
                            <div>
                                <div class="actions mb-1">
                                    <button class="btn btn-xs" id="btn-locate" title="Centralizar na sua localiza√ß√£o">üìç Minha localiza√ß√£o</button>
                                    <button class="btn btn-xs" id="btn-reset" title="Voltar para vis√£o inicial">‚Ü∫ Resetar vis√£o</button>
                                    <button class="btn btn-xs" id="btn-draw" title="Desenhar trechos (linhas) no mapa">‚úèÔ∏è Desenhar trechos</button>
                                    <button class="btn btn-xs" id="btn-draw-point" title="Marcar um ponto espec√≠fico">üìå Desenhar ponto</button>
                                    <button class="btn btn-xs" id="btn-draw-polygon" title="Desenhar √°rea (quadra)">‚ñß Desenhar √°rea</button>
                                    <button class="btn btn-xs" id="btn-export" title="Exportar tudo como GeoJSON">üíæ Finalizar</button>
                                    <button class="btn btn-xs" id="btn-clear" title="Remover todos os desenhos">üóëÔ∏è Limpar</button>
                                </div>
                            </div>
                            <div id="map"></div>
                        </div>
                </div>

                <!-- Formul√°rio (30%) -->
                <div class="lg:col-span-3 p-6 overflow-auto">
                    <form id="formAcao" class="space-y-4">
                            <input type="hidden" id="acaoId" />
                            <input type="hidden" id="responsavel" value="SEMOB" />
                        <input type="hidden" id="coordenadas"/>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">T√≠tulo</span>
                            </label>
                            <input type="text" id="titulo" class="input input-bordered input-sm" required/>
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Descri√ß√£o</span>
                            </label>
                            <textarea id="descricao" class="textarea textarea-bordered textarea-sm" rows="4"
                                      required></textarea>
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Data e Hora In√≠cio</span>
                            </label>
                            <input type="text"
                                   id="dataInicio"
                                   class="input input-bordered input-sm"
                                   placeholder="Selecione data e hora"
                                   required/>
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Data e Hora Fim</span>
                            </label>
                            <input type="text"
                                   id="dataFim"
                                   class="input input-bordered input-sm"
                                   placeholder="Selecione data e hora"
                                   required/>
                        </div>

                        <div class="form-control">
                            <label class="label cursor-pointer justify-start gap-2">
                                <input type="checkbox" id="acaoParcial" class="checkbox checkbox-primary checkbox-sm"/>
                                <span class="label-text">A√ß√£o Parcial</span>
                            </label>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <div class="px-6 py-4 border-t border-base-300 flex justify-end gap-2">
            <button type="button" class="btn btn-ghost" onclick="modalAcao.close()">Cancelar</button>
            <button type="button" class="btn btn-primary" id="btnSalvar">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24"
                     stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
                Salvar
            </button>
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>


    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <!-- Geoman (Leaflet.PM) JS -->
    <script src="https://unpkg.com/@@geoman-io/leaflet-geoman-free@2.15.0/dist/leaflet-geoman.min.js"></script>
    <script>
        // --- Configura√ß√£o base ---
        const inicial = { centro: [-8.76077, -63.8999], zoom: 13 };

        // Camadas base
        const osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contribs'
        });
        const esriSat = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
          maxZoom: 19,
          attribution: 'Tiles &copy; Esri &mdash; Source: Esri, USGS, IGN, etc.'
        });

        // Mapa
        const map = L.map('map', { center: inicial.centro, zoom: inicial.zoom, layers: [osm], zoomControl: true });

        // Controle de camadas
        const baseMaps = { 'OpenStreetMap': osm, 'Sat√©lite (Esri)': esriSat };
        const overlayMaps = {};
        const layerControl = L.control.layers(baseMaps, overlayMaps, { collapsed: true }).addTo(map);

        // Escala
        L.control.scale({ metric: true, imperial: false }).addTo(map);

        // Grupos
        const trechosGroup = L.layerGroup().addTo(map);
        const pontosGroup  = L.layerGroup().addTo(map);
        const areasGroup   = L.layerGroup().addTo(map);
        layerControl.addOverlay(trechosGroup, 'Trechos desenhados');
        layerControl.addOverlay(pontosGroup,  'Pontos desenhados');
        layerControl.addOverlay(areasGroup,   '√Åreas desenhadas');

        // Helpers
        function comprimentoEmMetros(latlngs) {
          if (!Array.isArray(latlngs)) return 0;
          let d = 0; for (let i = 1; i < latlngs.length; i++) d += map.distance(latlngs[i-1], latlngs[i]);
          return d;
        }
        function formatarMetros(m) { return m >= 1000 ? (m/1000).toFixed(2) + ' km' : Math.round(m) + ' m'; }

        // Click -> coordenadas
        map.on('click', (e) => {
          const { lat, lng } = e.latlng;
          L.popup().setLatLng([lat, lng]).setContent(`Coordenadas:<br><b>${lat.toFixed(6)}, ${lng.toFixed(6)}</b>`).openOn(map);
        });

        // Bot√µes b√°sicos
        document.getElementById('btn-reset').addEventListener('click', () => map.setView(inicial.centro, inicial.zoom));
        let userCircle = null, userMarker = null;
        document.getElementById('btn-locate').addEventListener('click', () => {
          if (!navigator.geolocation) return alert('Geolocaliza√ß√£o n√£o suportada.');
          navigator.geolocation.getCurrentPosition((e) => {
            const { latitude, longitude, accuracy } = e.coords; const pos = [latitude, longitude];
            if (!userMarker) userMarker = L.marker(pos, { title: 'Voc√™ est√° aqui' }).addTo(map); else userMarker.setLatLng(pos);
            if (!userCircle) userCircle = L.circle(pos, { radius: accuracy }).addTo(map); else { userCircle.setLatLng(pos); userCircle.setRadius(accuracy); }
            userMarker.bindPopup('Sua localiza√ß√£o aproximada'); map.setView(pos, 15);
          }, (err) => alert('N√£o foi poss√≠vel obter sua localiza√ß√£o: ' + (err.message||err)), { enableHighAccuracy: true, timeout: 10000, maximumAge: 10000 });
        });

        // --- Geoman (Leaflet.PM) ---
        const pmOK = !!(map.pm && typeof map.pm.addControls === 'function');
        if (pmOK) {
          // Estilo e snapping
          map.pm.setPathOptions({ color: '#d97706', weight: 6, opacity: 0.9 }, { snappable: true, snapDistance: 30, snapSegment: true, snapVertex: true });
          map.pm.addControls({
            position: 'topleft',
            drawMarker: true,
            drawPolygon: true,
            drawPolyline: true,
            editMode: true,
            removalMode: true,
            dragMode: false,
            cutPolygon: false,
            drawCircle: false,
            drawCircleMarker: false,
            drawRectangle: false
          });

          // Registrar cria√ß√µes
          map.on('pm:create', function (e) {
            const layer = e.layer; if (!layer) return;
            // Linha (Polyline)
            if (layer instanceof L.Polyline && !(layer instanceof L.Polygon)) {
              trechosGroup.addLayer(layer);
              const latlngs = layer.getLatLngs();
              const len = comprimentoEmMetros(latlngs);
              // Fechamento inteligente: se √∫ltimo ponto colar no primeiro, vira √°rea
              if (latlngs.length > 2) {
                const start = latlngs[0];
                const end = latlngs[latlngs.length - 1];
                const CLOSE_THRESH = 15; // metros
                if (map.distance(start, end) <= CLOSE_THRESH) {
                  const ring = latlngs.slice(0, -1); // remove o √∫ltimo (duplicado do primeiro)
                  const poly = L.polygon(ring, { color: '#059669', weight: 3, fillOpacity: 0.25 });
                  areasGroup.addLayer(poly); trechosGroup.removeLayer(layer);
                  poly.bindPopup('<b>√Årea</b><br>Quadra desenhada');
                  return;
                }
              }
              layer.bindPopup('<b>Trecho</b><br>Comprimento: ' + formatarMetros(len));
              return;
            }
            // Pol√≠gono
            if (layer instanceof L.Polygon) {
              areasGroup.addLayer(layer);
              layer.bindPopup('<b>√Årea</b><br>Quadra desenhada');
              return;
            }
            // Ponto
            if (layer instanceof L.Marker || layer instanceof L.CircleMarker) {
              pontosGroup.addLayer(layer);
              const { lat, lng } = layer.getLatLng();
              layer.bindPopup('<b>Ponto</b><br>LatLng: ' + lat.toFixed(6) + ', ' + lng.toFixed(6));
              return;
            }
          });

          // Bot√µes custom
          document.getElementById('btn-draw').addEventListener('click', function () {
            map.pm.enableDraw('Line', {
              snappable: true, snapVertex: true, snapSegment: true, snapDistance: 30,
              finishOn: 'dblclick', // finalize com duplo clique
              // requireSnapToFinish ajuda a fechar no v√©rtice, quando for o caso
              requireSnapToFinish: false
            });
          });
          document.getElementById('btn-draw-point').addEventListener('click', function () {
            map.pm.enableDraw('Marker', {});
          });
          document.getElementById('btn-draw-polygon').addEventListener('click', function () {
            map.pm.enableDraw('Polygon', {
              snappable: true, snapVertex: true, snapSegment: true, snapDistance: 30,
              // Com snapping ativado, clicar no primeiro v√©rtice fecha corretamente
              requireSnapToFinish: true
            });
          });
        } else {
          // Fallback se Geoman n√£o carregar
          const warn = () => alert('Leaflet.Geoman n√£o carregou. Desenho indispon√≠vel.');
          ['btn-draw','btn-draw-point','btn-draw-polygon'].forEach(id => { const el = document.getElementById(id); if (el) el.addEventListener('click', warn); });
        }

        // Exportar GeoJSON (linhas + pontos + √°reas)
        document.getElementById('btn-export').addEventListener('click', function () {
          const features = [];
          trechosGroup.eachLayer(layer => { const gj = layer.toGeoJSON(); if (gj?.geometry?.type === 'LineString') features.push(gj); });
          pontosGroup.eachLayer(layer => { const gj = layer.toGeoJSON(); if (gj?.geometry?.type === 'Point') features.push(gj); });
          areasGroup.eachLayer(layer  => { const gj = layer.toGeoJSON(); if (gj?.geometry && (gj.geometry.type === 'Polygon' || gj.geometry.type === 'MultiPolygon')) features.push(gj); });
          if (!features.length) { alert('N√£o h√° elementos para exportar.'); return; }
          const fc = { type: 'FeatureCollection', features };
          let coordenadas = document.getElementById('coordenadas')
          coordenadas.value = JSON.stringify(features)
          return console.warn(JSON.stringify(fc, null, 2));
          // const blob = new Blob([JSON.stringify(fc, null, 2)], { type: 'application/json' });
          // const url = URL.createObjectURL(blob);
          // const a = document.createElement('a'); a.href = url; a.download = 'desenhos-porto-velho.geojson'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
        });

        // Limpar
        document.getElementById('btn-clear').addEventListener('click', function(){ trechosGroup.clearLayers(); pontosGroup.clearLayers(); areasGroup.clearLayers(); });
    </script>

<!-- Script -->
<script>
    const API_URL = '/api/acoes';

    let flatpickrInicio;
    let flatpickrFim;

    // Configura√ß√£o do SweetAlert2
    const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    });

    // Fun√ß√µes auxiliares
    function mostrarLoading(show) {
        if (show) {
            $('#loadingSpinner').removeClass('hidden');
            $('#tabelaAcoes').addClass('loading');
        } else {
            $('#loadingSpinner').addClass('hidden');
            $('#tabelaAcoes').removeClass('loading');
        }
    }

    function mostrarErro(mensagem, detalhes = null) {
        Swal.fire({
            icon: 'error',
            title: 'Erro!',
            text: mensagem,
            footer: detalhes ? `<small>${detalhes}</small>` : null,
            confirmButtonColor: '#3b82f6'
        });
    }

    function mostrarSucesso(mensagem) {
        Toast.fire({
            icon: 'success',
            title: mensagem
        });
    }

    function formatarData(dataStr) {
        const data = new Date(dataStr);
        return data.toLocaleString('pt-BR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    function tratarErroAPI(xhr) {
        let mensagem = 'Erro desconhecido';
        let detalhes = null;

        if (xhr.responseJSON) {
            mensagem = xhr.responseJSON.message || mensagem;
            detalhes = xhr.responseJSON.error || null;
        } else if (xhr.responseText) {
            try {
                const response = JSON.parse(xhr.responseText);
                mensagem = response.message || mensagem;
                detalhes = response.error || null;
            } catch (e) {
                mensagem = xhr.responseText;
            }
        }

        return {mensagem, detalhes};
    }

    // Carregar a√ß√µes do backend
    function carregarAcoes() {
        mostrarLoading(true);

        $.ajax({
            url: API_URL,
            method: 'GET',
            success: function (response) {
                const acoes = response;
                const tbody = $('#tabelaAcoes');
                tbody.empty();

                if (acoes.length === 0) {
                    tbody.append('<tr><td colspan="6" class="text-center text-gray-500">Nenhuma a√ß√£o cadastrada</td></tr>');
                } else {
                    acoes.forEach(acao => {
                        
                        console.log(acao);
                        
                        tbody.append(`
                                <tr>
                                    <td>
                                        <div class="flex items-center gap-2">
                                            ${acao.possuiConflito ? `
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 shrink-0 stroke-current text-warning" fill="none" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                                </svg>
                                            ` : ''}
                                            <span>${acao.titulo}</span>
                                        </div>
                                    </td>
                                    <td>${acao.descricao}</td>
                                    <td>${formatarData(acao.dataInicio)}</td>
                                    <td>${formatarData(acao.dataFim)}</td>
                                    <td>
                                        <span class="badge badge-soft ${acao.acaoParcial ? 'badge-success' : 'badge-warning'}">
                                            ${acao.acaoParcial ? 'Parcial' : 'Total'}
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-soft btn-info mr-2" onclick="editarAcao(${acao.id})">Editar</button>
                                        <button class="btn btn-sm btn-soft btn-error" onclick="excluirAcao(${acao.id})">Excluir</button>
                                    </td>
                                </tr>
                            `);
                    });
                }
            },
            error: function (xhr) {
                const erro = tratarErroAPI(xhr);
                mostrarErro(erro.mensagem, erro.detalhes);
            },
            complete: function () {
                mostrarLoading(false);
            }
        });
    }

    // Inicializar Flatpickr DENTRO do modal ap√≥s ele abrir
    function inicializarDatePickers() {
        // Destruir inst√¢ncias anteriores
        if (flatpickrInicio) {
            flatpickrInicio.destroy();
        }
        if (flatpickrFim) {
            flatpickrFim.destroy();
        }

        // Data e Hora de In√≠cio
        flatpickrInicio = flatpickr("#dataInicio", {
            enableTime: true,
            dateFormat: "d/m/Y H:i",
            time_24hr: true,
            locale: "pt",
            minDate: "today",
            minuteIncrement: 15,
            defaultHour: 8,
            defaultMinute: 0,
            appendTo: document.querySelector('.modal-box'),
            onChange: function (selectedDates, dateStr, instance) {
                if (flatpickrFim && selectedDates.length > 0) {
                    flatpickrFim.set('minDate', selectedDates[0]);

                    if (flatpickrFim.selectedDates.length > 0 &&
                        flatpickrFim.selectedDates[0] < selectedDates[0]) {
                        flatpickrFim.clear();
                    }
                }
            }
        });

        // Data e Hora de Fim
        flatpickrFim = flatpickr("#dataFim", {
            enableTime: true,
            dateFormat: "d/m/Y H:i",
            time_24hr: true,
            locale: "pt",
            minDate: "today",
            minuteIncrement: 15,
            defaultHour: 17,
            defaultMinute: 0,
            appendTo: document.querySelector('.modal-box')
        });

        console.log('Flatpickr inicializado:', flatpickrInicio, flatpickrFim);
    }

    function abrirModal(acao = null) {
        if (acao) {
            $('#modalTitle').text('Editar A√ß√£o');
            $('#acaoId').val(acao.id);
            $('#responsavel').val(acao.responsavel);
            $('#titulo').val(acao.titulo);
            $('#descricao').val(acao.descricao);
            $('#coordenadas').val(acao.coordenadas);
            $('#acaoParcial').prop('checked', acao.acaoParcial);
        } else {
            $('#modalTitle').text('Nova A√ß√£o');
            $('#formAcao')[0].reset();
            $('#acaoId').val('');
        }

        modalAcao.showModal();

        // Inicializar Flatpickr DEPOIS que o modal abrir
        setTimeout(() => {
            inicializarDatePickers();

            // Se for edi√ß√£o, setar as datas
            if (acao) {
                const dataInicio = new Date(acao.dataInicio);
                const dataFim = new Date(acao.dataFim);
                flatpickrInicio.setDate(dataInicio);
                flatpickrFim.setDate(dataFim);
            }
        }, 200);
    }

    function editarAcao(id) {
        $.ajax({
            url: `${API_URL}/${id}`,
            method: 'GET',
            success: function (acao) {
                abrirModal(acao);
            },
            error: function (xhr) {
                const erro = tratarErroAPI(xhr);
                mostrarErro(erro.mensagem, erro.detalhes);
            }
        });
    }

    function excluirAcao(id) {
        Swal.fire({
            title: 'Tem certeza?',
            text: "Esta a√ß√£o n√£o poder√° ser revertida!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#ef4444',
            cancelButtonColor: '#6b7280',
            confirmButtonText: 'Sim, excluir!',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `${API_URL}/${id}`,
                    method: 'DELETE',
                    success: function () {
                        mostrarSucesso('A√ß√£o exclu√≠da com sucesso!');
                        carregarAcoes();
                    },
                    error: function (xhr) {
                        const erro = tratarErroAPI(xhr);
                        mostrarErro(erro.mensagem, erro.detalhes);
                    }
                });
            }
        });
    }

    // Event Listeners
    $('#btnNovaAcao').on('click', () => abrirModal());

    $('#btnSalvar').on('click', function (e) {
        e.preventDefault();

        // Validar datas
        const dataInicioVal = flatpickrInicio.selectedDates[0];
        const dataFimVal = flatpickrFim.selectedDates[0];

        if (!dataInicioVal || !dataFimVal) {
            Swal.fire({
                icon: 'warning',
                title: 'Aten√ß√£o',
                text: 'Por favor, preencha as datas de in√≠cio e fim',
                confirmButtonColor: '#3b82f6'
            });
            return;
        }

        if (dataFimVal <= dataInicioVal) {
            Swal.fire({
                icon: 'warning',
                title: 'Aten√ß√£o',
                text: 'A data de fim deve ser posterior √† data de in√≠cio',
                confirmButtonColor: '#3b82f6'
            });
            return;
        }

        const id = $('#acaoId').val();
        const dados = {
            titulo: $('#titulo').val(),
            descricao: $('#descricao').val(),
                responsavel: $('#responsavel').val(),
            coordenadas: $('#coordenadas').val(),
            dataInicio: dataInicioVal.toISOString(),
            dataFim: dataFimVal.toISOString(),
            acaoParcial: $('#acaoParcial').is(':checked')
        };

        const isEdicao = id !== '';
        if (isEdicao) {
            dados.id = parseInt(id);
        }

        $('#btnSalvar').prop('disabled', true).addClass('loading');

        $.ajax({
            url: isEdicao ? `${API_URL}/${id}` : API_URL,
            method: isEdicao ? 'PUT' : 'POST',
            contentType: 'application/json',
            data: JSON.stringify(dados),
            success: function () {
                modalAcao.close();
                mostrarSucesso(isEdicao ? 'A√ß√£o atualizada com sucesso!' : 'A√ß√£o criada com sucesso!');
                carregarAcoes();
            },
            error: function (xhr) {
                const erro = tratarErroAPI(xhr);
                mostrarErro(erro.mensagem, erro.detalhes);
            },
            complete: function () {
                $('#btnSalvar').prop('disabled', false).removeClass('loading');
            }
        });
    });

    // Inicializar ao carregar
    $(document).ready(function () {
        carregarAcoes();
    });
</script>
</body>
</html>