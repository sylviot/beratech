<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Syncronia - Filtros Geogr√°ficos</title>

    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css" />

    <!-- BeraMap CSS -->
    <link rel="stylesheet" href="/dist/css/maps.min.css">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f5f5;
        }

        .container {
            display: flex;
            height: 100vh;
            gap: 10px;
            padding: 10px;
        }

        #map {
            flex: 1;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .sidebar {
            width: 380px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 2px solid #3388ff;
            background: #fafafa;
        }

            .sidebar-header h1 {
                font-size: 22px;
                color: #333;
                margin: 0;
                display: flex;
                align-items: center;
                gap: 10px;
            }

        .sidebar-content {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }

        .section {
            margin-bottom: 25px;
        }

        .section-title {
            font-size: 14px;
            font-weight: 600;
            color: #555;
            margin-bottom: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .filter-group {
            margin-bottom: 15px;
        }

            .filter-group label {
                display: block;
                font-size: 12px;
                font-weight: 600;
                color: #666;
                margin-bottom: 6px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

            .filter-group input,
            .filter-group select {
                width: 100%;
                padding: 10px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 12px;
                font-family: inherit;
                background: white;
                color: #333;
                transition: border-color 0.3s ease;
            }

                .filter-group input:focus,
                .filter-group select:focus {
                    outline: none;
                    border-color: #3388ff;
                    box-shadow: 0 0 0 2px rgba(51, 136, 255, 0.1);
                }

                .filter-group input[type="date"] {
                    cursor: pointer;
                }

        .filter-date-range {
            display: flex;
            gap: 8px;
            align-items: center;
        }

            .filter-date-range input {
                flex: 1;
            }

            .filter-date-range .separator {
                color: #999;
                font-weight: 600;
            }

        .filter-buttons {
            display: flex;
            gap: 8px;
            margin-top: 12px;
        }

            .filter-buttons button {
                flex: 1;
                padding: 10px;
                border: none;
                border-radius: 4px;
                font-size: 12px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

        .btn-apply-filter {
            background: #4caf50;
            color: white;
        }

            .btn-apply-filter:hover {
                background: #45a049;
            }

        .btn-clear-filter {
            background: #f0f0f0;
            color: #666;
            border: 1px solid #ddd;
        }

            .btn-clear-filter:hover {
                background: #e0e0e0;
            }

        .filter-status {
            background: #e8f5e9;
            border-left: 3px solid #4caf50;
            padding: 12px;
            border-radius: 4px;
            font-size: 12px;
            margin-top: 12px;
            display: none;
        }

            .filter-status.active {
                display: block;
            }

        .filter-status-item {
            padding: 4px 0;
            color: #2e7d32;
        }

        .filter-result-info {
            background: #fff3e0;
            border-left: 3px solid #ff9800;
            padding: 12px;
            border-radius: 4px;
            font-size: 12px;
            margin-top: 12px;
            display: none;
        }

            .filter-result-info.active {
                display: block;
            }

        .filter-result-info-item {
            padding: 4px 0;
            color: #e65100;
        }

        .loading-message {
            text-align: center;
            padding: 20px;
            color: #666;
            font-size: 12px;
        }

        .loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3388ff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div id="map"></div>

        <div class="sidebar">
            <div class="sidebar-header">
                <h1>üìç Syncronia</h1>
            </div>

            <div class="sidebar-content">
                <!-- MENSAGEM DE CARREGAMENTO INICIAL -->
                <div class="section" id="loadingSection">
                    <div class="loading-message">
                        <div class="loading-spinner"></div>
                        <p style="margin-top: 10px;">Carregando dados...</p>
                    </div>
                </div>

                <!-- FILTROS - SE√á√ÉO PRINCIPAL -->
                <div class="section" id="filterSection" style="display: none;">
                    <div class="section-title">üîç Filtros</div>

                    <!-- Filtro: Respons√°vel -->
                    <div class="filter-group">
                        <label for="filterResponsavel">Respons√°vel</label>
                        <select id="filterResponsavel">
                            <option value="">-- Selecione --</option>
                            <option value="CAERD">CAERD</option>
                            <option value="Energisa">Energisa</option>
                            <option value="SEMAD">Secretaria Municipal de Administra√ß√£o (SEMAD)</option>
                            <option value="SEMASF">Secretaria Municipal de Assist√™ncia Social e da Fam√≠lia (SEMASF)</option>
                            <option value="SEMAGRIC">Secretaria Municipal de Agricultura e Abastecimento (SEMAGRIC)</option>
                            <option value="SEMDESTUR">Secretaria Municipal de Desenvolvimento S√≥cioecon√¥mico e Turismo (SEMDESTUR)</option>
                            <option value="SEMED">Secretaria Municipal de Educa√ß√£o (SEMED)</option>
                            <option value="SEMFAZ">Secretaria Municipal de Fazenda (SEMFAZ)</option>
                            <option value="SEMA">Secretaria Municipal de Meio Ambiente (SEMA)</option>
                            <option value="SEMOB">Secretaria Municipal de Obras (SEMOB)</option>
                            <option value="SEMUSA">Secretaria Municipal de Sa√∫de (SEMUSA)</option>
                            <option value="SEMTRAN">Secretaria Municipal de Tr√¢nsito, Mobilidade e Transporte (SEMTRAN)</option>
                        </select>
                    </div>

                    <!-- Filtro: Situa√ß√£o -->
                    <div class="filter-group">
                        <label for="filterSituacao">Situa√ß√£o</label>
                        <select id="filterSituacao">
                            <option value="">-- Selecione --</option>
                            <option value="Planejamento">Planejamento</option>
                            <option value="Em Execu√ß√£o">Em Execu√ß√£o</option>
                            <option value="Conclu√≠do">Conclu√≠do</option>
                            <option value="Pausado">Pausado</option>
                            <option value="Cancelado">Cancelado</option>
                        </select>
                    </div>

                    <!-- Filtro: Per√≠odo em Data -->
                    <div class="filter-group">
                        <label>Per√≠odo</label>
                        <div class="filter-date-range">
                            <input type="date" id="filterDataInicio" placeholder="Data in√≠cio">
                            <span class="separator">at√©</span>
                            <input type="date" id="filterDataFim" placeholder="Data fim">
                        </div>
                    </div>

                    <!-- Bot√µes de A√ß√£o -->
                    <div class="filter-buttons">
                        <button class="btn-apply-filter" id="applyFilterBtn">Aplicar Filtro</button>
                        <button class="btn-clear-filter" id="clearFilterBtn">Limpar Filtro</button>
                    </div>

                    <!-- Status dos Filtros -->
                    <div class="filter-status" id="filterStatus">
                        <div class="filter-status-item" id="filterStatusText"></div>
                    </div>

                    <!-- Informa√ß√µes de Resultados -->
                    <div class="filter-result-info" id="filterResultInfo">
                        <div class="filter-result-info-item" id="filterResultText"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Leaflet -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- BeraMap - Bundle minificado em dist/ -->
    <script src="/dist/js/maps.min.js"></script>

    <script>
        // ===================================================================
        // ESTADO GLOBAL
        // ===================================================================

        const state = {
          beraMap: null,
          loadedData: null,
          allUUIDs: [],           // Todos os UUIDs carregados
          visibleUUIDs: [],       // UUIDs vis√≠veis atualmente (ap√≥s filtro)
          hiddenUUIDs: [],        // UUIDs ocultos (removidos do mapa)
          featuresByUUID: {},     // Armazenar features originais por UUID para restaura√ß√£o
          filters: {
            responsavel: '',
            situacao: '',
            dataInicio: '',
            dataFim: ''
          },
          filtroAtivo: false
        };

        // ===================================================================
        // INICIALIZA√á√ÉO DO MAPA
        // ===================================================================

        function initMap() {
          state.beraMap = BeraMap.init('map', {
            center: [-8.7619, -63.9039],
            zoom: 13
          });
        }

        // ===================================================================
        // FILTROS
        // ===================================================================

        function applyFilters() {
          state.filters.responsavel = document.getElementById('filterResponsavel').value;
          state.filters.situacao = document.getElementById('filterSituacao').value;
          state.filters.dataInicio = document.getElementById('filterDataInicio').value;
          state.filters.dataFim = document.getElementById('filterDataFim').value;

          // Verificar se algum filtro foi aplicado
          const temFiltro = state.filters.responsavel || state.filters.situacao ||
            state.filters.dataInicio || state.filters.dataFim;

          if (temFiltro) {
            state.filtroAtivo = true;
            updateFilterStatus();
            filterGeometries();
          } else {
            clearFilters();
          }
        }

        function clearFilters() {
          document.getElementById('filterResponsavel').value = '';
          document.getElementById('filterSituacao').value = '';
          document.getElementById('filterDataInicio').value = '';
          document.getElementById('filterDataFim').value = '';

          state.filters.responsavel = '';
          state.filters.situacao = '';
          state.filters.dataInicio = '';
          state.filters.dataFim = '';

          state.filtroAtivo = false;
          document.getElementById('filterStatus').classList.remove('active');
          document.getElementById('filterResultInfo').classList.remove('active');

          // Restaurar todas as geometrias ocultas
          restoreAllGeometries();
        }

        function restoreAllGeometries() {
          // Restaurar geometrias que foram ocultas pelo filtro
          if (state.hiddenUUIDs.length > 0) {
            state.hiddenUUIDs.forEach(uuid => {
              // Verificar se a feature est√° armazenada
              if (state.featuresByUUID[uuid]) {
                const feature = state.featuresByUUID[uuid];
                // Re-adicionar a geometria com o UUID original
                state.beraMap.addGeometries(feature, { uuid: uuid });
              }
            });
            // Limpar array de ocultos e atualizar vis√≠veis
            state.hiddenUUIDs = [];
            state.visibleUUIDs = [...state.allUUIDs];
          }
        }

        function filterGeometries() {
          // Etapa 1: Restaurar todas as geometrias ocultas antes de aplicar novo filtro
          restoreAllGeometries();

          state.visibleUUIDs = [];
          const uuidsToRemove = [];

          // Etapa 2: Iterar sobre todas as geometrias e verificar filtros
          state.allUUIDs.forEach(uuid => {
            const geometryData = state.beraMap.getGeometryByUUID(uuid);

            if (geometryData) {
              const props = geometryData.feature.properties || {};

              // Verificar se passa nos filtros
              let passaNosFilteros = true;

              if (state.filters.responsavel && props.responsavel !== state.filters.responsavel) {
                passaNosFilteros = false;
              }

              if (state.filters.situacao && props.situacao !== state.filters.situacao) {
                passaNosFilteros = false;
              }

              if (state.filters.dataInicio && props.dataInicio && props.dataInicio < state.filters.dataInicio) {
                passaNosFilteros = false;
              }

              if (state.filters.dataFim && props.dataFim && props.dataFim > state.filters.dataFim) {
                passaNosFilteros = false;
              }

              if (passaNosFilteros) {
                state.visibleUUIDs.push(uuid);
              } else {
                uuidsToRemove.push(uuid);
              }
            }
          });

          // Etapa 3: Remover geometrias que n√£o passaram no filtro
          if (uuidsToRemove.length > 0) {
            state.beraMap.removeGeometries(uuidsToRemove);
            state.hiddenUUIDs = uuidsToRemove;
          }

          // Etapa 4: Atualizar informa√ß√µes de resultado
          updateResultInfo();
        }

        function updateFilterStatus() {
          const statusEl = document.getElementById('filterStatus');
          const statusTextEl = document.getElementById('filterStatusText');

          const filtrosAtivos = [];

          if (state.filters.responsavel) {
            filtrosAtivos.push('Respons√°vel: ' + state.filters.responsavel);
          }
          if (state.filters.situacao) {
            filtrosAtivos.push('Situa√ß√£o: ' + state.filters.situacao);
          }
          if (state.filters.dataInicio) {
            filtrosAtivos.push('Data in√≠cio: ' + state.filters.dataInicio);
          }
          if (state.filters.dataFim) {
            filtrosAtivos.push('Data fim: ' + state.filters.dataFim);
          }

          statusTextEl.textContent = filtrosAtivos.join(' | ');
          statusEl.classList.add('active');
        }

        function updateResultInfo() {
          const resultEl = document.getElementById('filterResultInfo');
          const resultTextEl = document.getElementById('filterResultText');

          const totalGeometrias = state.allUUIDs.length;
          const geometriasVisiveis = state.visibleUUIDs.length;
          const geometriasOcultas = state.hiddenUUIDs.length;

          resultTextEl.innerHTML =
            'üìä Resultado: <strong>' + geometriasVisiveis + '</strong> de <strong>' + totalGeometrias +
            '</strong> geometrias (' + geometriasOcultas + ' ocultas)';

          resultEl.classList.add('active');
        }

        // ===================================================================
        // CARREGAR DADOS
        // ===================================================================

        function loadData() {
          try {
            fetch('/api/acoes/filter') 
            // fetch('/data/dados.geojson')
              .then(function(response) {
                if (!response.ok) {
                  throw new Error('HTTP ' + response.status);
                }
                return response.json();
              })
              .then(function(geojson) {
                            console.log(geojson)

                if (!geojson.features || !Array.isArray(geojson.features)) {
                  throw new Error('GeoJSON inv√°lido');
                }

                const uuids = state.beraMap.addGeometries(geojson);

                // Armazenar features originais por UUID para restaura√ß√£o posterior
                uuids.forEach((uuid, index) => {
                  if (geojson.features[index]) {
                    state.featuresByUUID[uuid] = geojson.features[index];
                  }
                });

                state.loadedData = {
                  uuids: uuids,
                  data: geojson,
                  loadedAt: new Date()
                };

                state.allUUIDs = uuids;
                state.visibleUUIDs = uuids;

                // Ocultar mensagem de carregamento
                document.getElementById('loadingSection').style.display = 'none';

                // Mostrar se√ß√£o de filtros
                document.getElementById('filterSection').style.display = 'block';

                // Encaixar limites
                state.beraMap.fitBounds();
              })
              .catch(function(error) {
                console.error('Erro ao carregar:', error.message);
                document.getElementById('loadingSection').innerHTML =
                  '<div class="loading-message" style="color: #d32f2f;">‚ùå Erro ao carregar dados</div>';
              });
          } catch (error) {
            console.error('Erro:', error.message);
          }
        }

        // ===================================================================
        // EVENT LISTENERS
        // ===================================================================

        document.getElementById('applyFilterBtn').addEventListener('click', applyFilters);

        document.getElementById('clearFilterBtn').addEventListener('click', clearFilters);

        // ===================================================================
        // EXPORTAR FUN√á√ïES GLOBAIS
        // ===================================================================

        window.app = {
          loadData: loadData,
          applyFilters: applyFilters,
          clearFilters: clearFilters,
          state: state
        };

        // ===================================================================
        // INICIALIZA√á√ÉO
        // ===================================================================

        initMap();

        // Carregar dados automaticamente ap√≥s inicializar o mapa
        setTimeout(loadData, 500);
    </script>

</body>
</html>
